plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

mainClassName = "com.r3.conclave.sample.host.Host"

// Override the default (simulation) with -PenclaveMode=
def mode = findProperty("enclaveMode")?.toString()?.toLowerCase() ?: "simulation"

dependencies {
    implementation "com.r3.conclave:conclave-host:$conclaveVersion"

    // We need the enclave at runtime but not when compiling the host, because they don't share types.
    runtimeOnly project(path: ":enclave", configuration: mode)

    testImplementation "org.junit.jupiter:junit-jupiter:5.6.0"

    def graalVMDir = tasks.getByPath(":enclave:untarGraalVM").outputs.files.first()
    def configurationDir = project(":enclave").projectDir.toPath().resolve("src/main/resources/META-INF/native-image")
    def filterFile = configurationDir.resolve("filter.json")
    application {
        run.dependsOn(":enclave:untarGraalVM")
        if (project.hasProperty("generateConfigFiles") && properties.get("enclaveMode").toString().toLowerCase() == "mock" != null) {
            applicationDefaultJvmArgs = [
                    "-agentpath:$graalVMDir/jre/lib/amd64/libnative-image-agent.so=config-output-dir=$configurationDir," +
                            "caller-filter-file=$filterFile"
            ]
        }
    }
}